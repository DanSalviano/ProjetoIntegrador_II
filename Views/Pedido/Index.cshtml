@model PedidoViewModel
@inject UserManager<UsuarioModel> _userManager

@{
    ViewBag.Subtitulo = Context.User.IsInRole("administrador") ||
    Context.User.IsInRole("gerente") || Context.User.IsInRole("pizzaiolo") ||
    Context.User.IsInRole("entregador") ? "Acompanhar Pedidos" : "Meus Pedidos";


    var total = Model.ShoppingCartItems.Select(i => i.Subtotal).Sum();
    var count = Model.ShoppingCartItems.Select(i => i.Quantidade).Sum();
    var usuario = await _userManager.GetUserAsync(Context.User);

    // Capitalizar Texto
    var cliente = System.Globalization.CultureInfo.CurrentCulture.TextInfo.ToTitleCase(usuario.NomeCompleto.ToLower());
}

@section styles {
    <link href="https://cdn.datatables.net/2.0.5/css/dataTables.bootstrap5.min.css" rel="stylesheet" />
}

<div class="d-flex justify-content-between">
    <div>
        <h3 class="subtitulo">@ViewBag.Subtitulo</h3>
    </div>
</div>
<hr />

@if (Context.User.IsInRole("usuario"))
{
    <h5>
        <span class="text-primary">
            Cliente: @cliente
        </span>
    </h5>
}
<partial name="_MensagemPartial" />

<span hx-get="../Pedido/Status/1223" hx-trigger="every 5s"></span>
<table id="pedidoTable" class="table table-striped table-hover"></table>

@section Scripts {

    <script src="https://cdn.datatables.net/2.0.5/js/dataTables.js" type="text/javascript"></script>
    <script src="https://cdn.datatables.net/2.0.5/js/dataTables.bootstrap5.min.js" type="text/javascript"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.4.0/moment.min.js" type="text/javascript"></script>
    <script src="https://unpkg.com/htmx.org@1.9.12" integrity="sha384-ujb1lZYygJmzgSwoxRggbCHcjc0rB2XoQrxeTUQyRjrOnlCoYta87iKBWq3EsdM2" crossorigin="anonymous" defer></script>

    <script type="text/javascript">
        $(document).ready(function () {

            if (@count > 0) {
                $(".bi-cart").closest("li").addClass("cart-notice");
                $(".cart-notice").attr('counter', @count);
            } else {
                $(".bi-cart").closest("li").removeClass("cart-notice");
                $(".cart-notice").attr('counter', '0');
            }

            function format(d) {
                let telefone = d.telefone || "Não Informado";
                let observacao = d.observacao ? `<div class="px-4 text-muted"><span class="text-warning"><i class="bi bi-exclamation-triangle-fill"></span></i>&nbsp;&nbsp;${d.observacao}</div>` : '';
                html = '<div class="card my-4">'
                html += '<div class="card-header d-flex justify-content-between fs-5 px-4 py-3 mb-3">'
                html += `<div><i class="bi bi-whatsapp text-success"></i></i>&nbsp;&nbsp;${telefone}</div>`
                html += `<div><i class="bi bi-pin-map text-warning">&nbsp;&nbsp</i>${d.enderecoCompleto}</div>`
                html += `</div>${observacao}`
                html += '<div class="card-body py-3">'
                html += '<table class="table table-borderless">'
                html += '<thead>'
                html += '<tr>'
                html += '<th class="text-center">Qtde</th>'
                html += '<th>Produto</th>'
                html += '<th>Conteúdo</th>'
                html += '<th class="text-end">Valor</th>'
                html += '<th class="text-end">Subtotal</th>'
                html += '</tr>'
                html += '</thead>'
                html += '<tbody>'

                for (let produto of d.pedidoItens) {
                    let preco = produto.preco.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                    let subtotal = produto.subtotal.toLocaleString('pt-BR', { style: 'currency', currency: 'BRL' });
                    html += '<tr>'
                    html += `<td class="text-center">${produto.quantidade}</td>`
                    html += `<td>${produto.produto.produto}</td>`
                    html += `<td>${produto.getConteudo}</td>`
                    html += `<td class="text-end">${preco} </td>`
                    html += `<td class="text-end">${subtotal}</td>`
                    html += '</tr>'
                }
                html += `</tbody></table></div>`;

                let preparo = d.dataInicioPreparo == null ?
                    '<div class="step">Início do Preparo</div>' :
                    '<div class="step bg-success text-light">' +
                    `<h6>Início do Preparo</h6><div class="d-flex justify-content-evenly w-100"><div title="${new Date(d.dataInicioPreparo).toLocaleString()}">${d.dataInicioPreparo ? "às " + new Date(d.dataInicioPreparo).toLocaleTimeString() : ''}</div>` +
                    `<div title="${d.usuarioNomeInicioPreparo}">${d.usuarioNomeInicioPreparo ? "por " + d.usuarioNomeInicioPreparo.split(' ')[0] : ''}</div></div></div>`;

                let pronto = d.dataFimPreparo == null ?
                    '<div class="step">Fim do Preparo</div>' :
                    '<div class="step bg-success text-light">' +
                    `<h6>Fim do Preparo</h6><div class="d-flex justify-content-evenly w-100"><div title="${new Date(d.dataFimPreparo).toLocaleString()}">${d.dataFimPreparo ? "às " + new Date(d.dataFimPreparo).toLocaleTimeString() : ''}</div>` +
                    `<div title="${d.usuarioNomeFimPreparo}">${d.usuarioNomeFimPreparo ? "por " + d.usuarioNomeFimPreparo.split(' ')[0] : ''}</div></div></div>`;

                let saiuparaentrega = d.dataInicioEntrega == null ?
                    '<div class="step">Saiu para Entrega</div>' :
                    '<div class="step bg-success text-light">' +
                    `<h6>Saiu para Entrega</h6><div class="d-flex justify-content-evenly w-100"><div title="${new Date(d.dataInicioEntrega).toLocaleString()}">${d.dataInicioEntrega ? "às " + new Date(d.dataInicioEntrega).toLocaleTimeString() : ''}</div>` +
                    `<div title="${d.usuarioNomeInicioEntrega}">${d.usuarioNomeInicioEntrega ? "por " + d.usuarioNomeInicioEntrega.split(' ')[0] : ''}</div></div></div>`;

                let entregue = d.dataFimEntrega == null ?
                    '<div class="step">Entregue</div>' :
                    '<div class="step bg-success text-light">' +
                    `<h6>Entregue</h6><div class="d-flex justify-content-evenly w-100"><div title="${new Date(d.dataFimEntrega).toLocaleString()}">${d.dataFimEntrega ? "às " + new Date(d.dataFimEntrega).toLocaleTimeString() : ''}</div>` +
                    `<div title="${d.usuarioNomeFimEntrega}">${d.usuarioNomeFimEntrega ? "por " + d.usuarioNomeFimEntrega.split(' ')[0] : ''}</div></div></div>`;


                html += '<div class="flow-container">';
                html += `${preparo}<div class="connector"></div>`;
                html += `${pronto}<div class="connector"></div>`;
                html += `${saiuparaentrega}<div class="connector"></div>`;
                html += `${entregue}</div></div>`;

                return html;
            }

            const pedidoTable = new DataTable("#pedidoTable", {
                language: Language,
                serverSide: "true",
                ajax: {
                    deferRender: true,
                    url: '/Pedido/GetData',
                    type: 'POST',
                    datatype: 'json',
                    error: function (xhr, error, thrown) {
                        if (xhr.status >= 400 && xhr.status < 501) {
                            console.log(thrown);
                            alert('Erro ' + xhr.status + ': Ocorreu um erro na requisição.');
                        }
                    }
                },
                columns: [
                    {
                        class: 'dt-control py-4',
                        orderable: false,
                        data: null,
                        defaultContent: ''
                    },
                    {
                        data: 'getCodigo',
                        name: 'GetCodigo',
                        title: 'Código',
                        className: 'align-middle',
                        orderable: false
                    },
                    {
                        data: 'cliente',
                        name: 'Cliente',
                        title: 'Cliente',
                        className: 'align-middle',
                        orderable: false
                    },
                    {
                        data: 'dataDoPedido',
                        name: "DataDoPedido",
                        title: 'Data do Pedido',
                        className: 'align-middle',
                        orderable: false,
                        render: function (data, type, row, meta) {
                            return new Date(row.dataDoPedido).toLocaleString();
                        }
                    },
                    {
                        data: 'getFormaPagamento',
                        name: 'GetFormaPagamento',
                        title: 'Pagamento',
                        className: 'text-center align-middle',
                        orderable: false,
                    },
                    {
                        data: 'troco',
                        name: 'Troco',
                        title: 'Troco',
                        orderable: false,
                        className: 'text-end align-middle',
                        render: function (data, type, row, meta) {
                            const value = parseFloat(row.troco);
                            if (!value) return 0;
                            return value.toLocaleString('pt-br', { minimumFractionDigits: 2 });
                        }
                    },
                    {
                        data: 'total',
                        name: 'Total',
                        title: 'Total',
                        className: 'text-end align-middle',
                        orderable: false,
                        render: function (data, type, row, meta) {
                            const value = parseFloat(row.total);
                            if (!value) return 0;
                            return value.toLocaleString('pt-br', { minimumFractionDigits: 2 });
                        }
                    },
                    {
                        'data': 'getStatus',
                        'name': 'GetStatus',
                        'className': 'text-center align-middle',
                        'orderable': false,
                        'title': 'Status', render: function (data, type, row, meta) {
                            switch (row.getStatus) {
                                case 'Aguardando Preparo':
                                    return '<span class="badge text-bg-secondary" hx-get="../Pedido/Status/1223" hx-trigger="every 5s">Aguardando Preparo</span>';
                                case 'Preparo Iniciado':
                                    return "<span class='badge text-bg-info'>Preparo Iniciado</span>";
                                case 'Preparo Finalizado':
                                    return "<span class='badge text-bg-primary'>Preparo Finalizado</span>";
                                case 'Saiu Para Entrega':
                                    return "<span class='badge text-bg-warning'>Saiu Para Entrega</span>";
                                case 'Entregue':
                                    return "<span class='badge text-bg-success'>Entregue</span>";
                                default:
                                    throw new Error(`Status Inválido: ${row.getStatus}`);
                            }
                        }
                    },
                    {
                        data: 'roles',
                        name: 'Roles',
                        visible: false
                    },
                    {
                        data: 'id',
                        name: 'Id',
                        title: '<i class="bi bi-sliders"></i>', orderable: false, className: 'text-center text-nowrap align-middle', width: '120px', render: function (data, type, row, meta) {
                            let html = '';
                            if (!row.roles.length) {
                                html = "<div class='spinner-grow text-primary' role='status'><span class='visually-hidden'> Loading...</span></div>";
                            }
                            if (row.getStatus == 'Aguardando Preparo') {
                                if (row.roles.includes('administrador') || row.roles.includes('pizzaiolo')) {
                                    html = "<a class='btn btn-sm bg-danger text-white' href='/Pedido/IniciarPreparo/" + data + "' title='Iniciar preparo'><i class='bi bi-hourglass-top'></i> Iniciar Preparo</a>&nbsp;"
                                }
                            } else if (row.getStatus == 'Preparo Iniciado') {
                                if (row.roles.includes('administrador') || row.roles.includes('pizzaiolo')) {
                                    html = "<a class='btn btn-sm btn-danger' href='/Pedido/FinalizarPreparo/" + data + "' title='Finalizar preparo'><i class='bi bi-hourglass-bottom'></i> Finalizar Preparo</a>&nbsp;"
                                }
                            } else if (row.getStatus == 'Preparo Finalizado') {
                                if (row.roles.includes('administrador') || row.roles.includes('entregador')) {
                                    html = "<a class='btn btn-sm btn-danger' href='/Pedido/IniciarEntrega/" + data + "' title='Iniciar Entrega'><i class='bi bi-bicycle'></i> Iniciar Entrega</a>&nbsp;"
                                }
                            } else if (row.getStatus == 'Saiu Para Entrega') {
                                if (row.roles.includes('administrador') || row.roles.includes('entregador')) {
                                    html = "<a class='btn btn-sm btn-danger' href='/Pedido/FinalizarEntrega/" + data + "' title='Finalizar Entrega'><i class='bi bi-check-all'></i> Finalizar Entrega</a>&nbsp;"
                                }
                            } else if (row.getStatus == 'Entregue') {
                                if (row.roles.includes('administrador') || row.roles.includes('gerente') || row.roles.includes('pizzaiolo') || row.roles.includes('entregador')) {
                                    var ms = moment(new Date(row.dataFimEntrega).toLocaleString(), "DD/MM/YYYY, HH:mm:ss").diff(moment(new Date(row.dataDoPedido).toLocaleString(), "DD/MM/YYYY, HH:mm:ss"));
                                    var d = moment.duration(ms);
                                    var s = Math.floor(d.asHours()) + "h" + moment.utc(ms).format(" mm") + "m";
                                    html = Math.floor(d.asHours()) < 1 ? '<div class="badge text-bg-success fs-6"><i class="bi bi-hand-thumbs-up"></i>&nbsp;&nbsp;' : '<div class="badge text-bg-danger fs-6"><i class="bi bi-hand-thumbs-down"></i>&nbsp;&nbsp;';
                                    html += s + "</div>";
                                } else {
                                    html = "<div class='badge text-bg-success'>Bom Apetite!</div>";
                                }
                            }
                            return html
                        }
                    },
                ],
                order: [[3, "desc"]],
                searching: false
            });

            const detailRows = [];

            pedidoTable.on('click', 'tbody td.dt-control', function (e) {
                let tr = e.target.closest('tr');
                let idx = detailRows.indexOf(tr.id);

                if ((pedidoTable.row(tr)).child.isShown()) {
                    tr.classList.remove('details');
                    (pedidoTable.row(tr)).child.hide();

                    // Remove from the 'open' array
                    detailRows.splice(idx, 1);
                }
                else {
                    tr.classList.add('details');
                    (pedidoTable.row(tr)).child(format((pedidoTable.row(tr)).data())).show();

                    // Add to the 'open' array
                    if (idx === -1) {
                        detailRows.push(tr.id);
                    }
                }
            });

            // On each draw, loop over the `detailRows` array and show any child rows
            pedidoTable.on('draw', () => {
                detailRows.forEach((id, i) => {
                    let el = document.querySelector('#' + id + ' td.dt-control');

                    if (el) {
                        el.dispatchEvent(new Event('click', { bubbles: true }));
                    }
                });
            });
        });
    </script>
}